/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/

/ {
    macros {
        left_wind: left_wind {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LEFT_ARROW))>;
            label = "LEFT_WIND";
        };

        right_wind: right_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(RIGHT))>;
            label = "RIGHT_WINDOW";
        };

        prnt_scrn: prnt_scrn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(S))>;
            label = "PRNT_SCRN";
        };

        Alt_tab: Alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_release>,
                <&kp LEFT_ALT &tog 0>;

            label = "ALT_TAB";
        };
    };

    behaviors {
        layer: layer {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DELETE>;
            key-positions = <11 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | GRAVE  |   1    |   2    |   3    |   4    |   5    |                                      |   6    |   7    |   8    |   9    |   0    |  DEL   |
            // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
            // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   '    |
            // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |  LBKT  |                    |  RBKT  |   N    |   M    |   ,    |   .    |   /    |  RET   |
            // | ADJUST |  ESC   |  ALT   |  LGUI  | EISUU  | LOWER  | SPACE  |                    |  SPACE | RAISE  |  KANA  |  LEFT  |  DOWN  |  UP    |  RIGHT |

            bindings = <
&mt GRAVE ESCAPE  &kp Q  &kp W  &kp E  &kp R         &kp T                          &kp Y   &kp U          &kp I      &kp O       &kp P          &kp BACKSPACE
&kp LCTRL         &kp A  &kp S  &kp D  &kp F         &kp G                          &kp H   &kp J          &kp K      &kp L       &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C  &kp V         &kp B                          &kp N   &kp M          &kp COMMA  &kp PERIOD  &kp SLASH      &kp RIGHT_SHIFT
&none             &none  &none  &mo 6  &kp LEFT_ALT  &mo 5  &kp SPACE    &kp ENTER  &layer  &kp RIGHT_ALT  &mo 3      &none       &none          &none
&none             &none  &none  &none  &none         &none  &none        &none      &none   &none          &none      &none       &none          &none
            >;
        };

        Num_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |       |       |       |       |       |                                    |       |       |       |       |       |       |
            // |   `   |   1   |   2   |   3   |   4   |   5   |                                    |   6   |   7   |   8   |   9   |   0   |  DEL  |
            // |       |  F1   |  F2   |  F3   |  F4   |  F5   |                                    |  F6   |   -   |   =   |   [   |   ]   |   \   |
            // |       |  F7   |  F8   |  F9   |  F10  |  F11  |       |                    |       |  F12  |       | PSCRN | PG_DN | PG_UP |       |
            // |       |       |       |       |       |       |       |                    |       |       |       | NEXT  | VOL-  | VOL+  | PLAY  |

            bindings = <
&trans  &trans    &trans        &trans     &trans      &trans                    &kp COMMA   &kp N7        &kp N8        &kp N9        &kp PLUS       &kp ASTRK
&trans  &kp LCMD  &kp LEFT_ALT  &kp LCTRL  &kp LSHIFT  &trans                    &kp N0      &kp N4        &kp N5        &kp NUMBER_6  &kp MINUS      &kp KP_DIVIDE
&trans  &trans    &trans        &trans     &trans      &trans                    &kp KP_DOT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp RS(EQUAL)  &trans
&trans  &trans    &trans        &trans     &trans      &trans  &trans    &trans  &trans      &trans        &trans        &trans        &trans         &trans
&trans  &trans    &trans        &trans     &trans      &trans  &trans    &trans  &trans      &trans        &trans        &trans        &trans         &trans
            >;
        };

        Sym_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |      |      |      |      |      |      |                                  |      |      |      |      |      |      |
            // |  ~   |  !   |  @   |  #   |  $   |  %   |                                  |  ^   |  &   |  *   |  (   |  )   |      |
            // |      |      |      |      |      |      |                                  |      |  _   |  +   |  {   |  }   | PIPE |
            // |      |      |      |      |      |      |  (   |                    |  )   |      |      |      | HOME | END  |      |
            // |      |      |      |      |      |      |      |                    |      |      |      |      |      |      |      |

            bindings = <
&trans  &trans    &trans        &trans     &trans     &trans                    &kp LEFT_BRACKET      &kp AMPS         &kp ASTRK    &kp UNDERSCORE  &kp RIGHT_BRACKET      &trans
&trans  &kp LCMD  &kp LEFT_ALT  &kp LCTRL  &kp LSHFT  &trans                    &kp LEFT_PARENTHESIS  &kp DOLLAR       &kp PERCENT  &kp CARET       &kp RIGHT_PARENTHESIS  &trans
&trans  &trans    &trans        &trans     &trans     &trans                    &kp LEFT_BRACE        &kp EXCLAMATION  &kp AT_SIGN  &kp HASH        &kp RBRC               &kp PIPE
&trans  &trans    &trans        &trans     &trans     &trans  &trans    &trans  &trans                &trans           &trans       &trans          &trans                 &trans
&trans  &trans    &trans        &trans     &trans     &trans  &trans    &trans  &trans                &trans           &trans       &trans          &trans                 &trans
            >;
        };

        Func_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans          &trans                    &trans  &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &kp LCMD  &kp LALT  &kp LCTRL  &kp LEFT_SHIFT  &trans                    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans    &trans    &trans     &trans          &trans                    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
&trans  &trans    &trans    &trans     &trans          &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans    &trans    &trans     &trans          &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };

        Alt-tab {
            bindings = <
&trans  &trans  &trans  &kp LS(TAB)  &kp TAB  &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans   &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans   &trans                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans   &Alt_tab  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans       &trans   &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Nav_layer {
            bindings = <
&kp LA(F4)  &trans    &left_wind      &right_wind   &tog 4     &trans                        &trans          &trans           &trans            &trans             &trans      &trans
&trans      &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &prnt_scrn                    &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &kp K_VOLUME_DOWN  &kp C_NEXT  &trans
&trans      &trans    &trans          &trans        &trans     &trans                        &trans          &trans           &trans            &trans             &trans      &trans
&trans      &trans    &trans          &trans        &trans     &trans      &trans    &trans  &trans          &trans           &trans            &trans             &trans      &trans
&trans      &trans    &trans          &trans        &trans     &trans      &trans    &trans  &trans          &trans           &trans            &trans             &trans      &trans
            >;
        };

        Mause {
            bindings = <
&trans  &trans          &trans          &trans        &trans           &trans                              &trans     &trans     &trans  &trans  &trans  &trans
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans                              &trans     &trans     &trans  &trans  &trans  &trans
&trans  &kp K_UNDO      &kp K_CUT       &kp K_COPY    &kp K_PASTE      &kp K_REDO                          &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans        &mkp MCLK        &mkp LCLK   &mkp RCLK    &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans  &trans  &trans
&trans  &trans          &trans          &trans        &trans           &trans      &trans       &trans     &trans     &trans     &trans  &trans  &trans  &trans
            >;
        };

        adjust_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |    `     |    !     |    @     |    #     |    $     |    %     |                                          |    ^     |    &     |    *     |    (     |    )     |  EP TOG  |
            // |  BT CLR  | BT SEL0  | BT SEL1  | BT SEL2  | BGT SEL3 | BT SEL4  |                                          | RGB EFF+ | RGB HUE+ | RGB SAT+ | RGB SPD+ | RGB BRI+ | RGB TOG  |
            // |  BT NXT  | OUT TOG  | OUT USB  | OUT BLE  |          |          |                                          | RGB EFF- | RGB HUE- | RGB SAT- | RGB SPD- | RGB BRI- |          |
            // |  BT PRV  |          |          |          |          |          |    {     |                    |    }     |          |          |          |          |          |          |
            // |          |          |          |          |          |          |          |                    |          |          |          |          |          |          |          |

            bindings = <
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT                           &kp CARET        &kp AMPS         &kp ASTRK        &kp LPAR         &kp RPAR         &ext_power EP_TOG
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                        &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG
&bt BT_NXT  &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &trans        &trans                              &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &trans
&bt BT_PRV  &trans        &trans        &trans        &trans        &trans        &kp LBRC    &kp RBRC  &trans           &trans           &trans           &trans           &trans           &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans      &trans    &trans           &trans           &trans           &trans           &trans           &trans
            >;
        };
    };
};
